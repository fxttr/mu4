-- Copyright (C) 2024 Florian Marrero Liestmann
-- SPDX-License-Identifier:  GPL-3.0-only

PROJECT mu4_kern
IS
   FOR default_language    USE "Ada";
   FOR languages           USE("Ada", "ASM");
   FOR source_dirs         USE
     ("./arch/",
      "./spec/",
      "./runtime/",
      "./core");
   FOR object_dir          USE "./../../build/kernel/";
   FOR exec_dir            USE mu4_kern'object_dir;
   FOR create_missing_dirs USE "true";
   FOR main                USE("mu4.adb");
   FOR runtime("Ada")      USE mu4_kern'object_dir;

   TYPE kernel_type IS("Final", "Debug");
   Build : kernel_type := EXTERNAL("Build", "Final");

   PACKAGE Metrics
   IS -- `gnatmetric`
      Metrics_Switches :=
        ("--contract-all",
         "--complexity-all",
         "--lines-all", "--lines-spark",
         "--syntax-all");

      FOR default_switches("Ada") USE
         Metrics_Switches;
   END Metrics;

   PACKAGE Prove
   IS
      SPARK_Proof_Switches :=
        (-- Use all CPU cores to speed up the provers.
         "-j0",
         -- Output assumption info in the build directory.
         "--assumptions",
         -- Strict interpretation of Ada to the standard.
         "--pedantic",
         -- Generate counterexamples so it's easier to tell what can go wrong.
         "--counterexamples=on",
         -- Useful CWE identifiers for various issues and vulnerabilities.
         "--cwe",
         -- Highest/most powerful proof level. It's not too much slower.
         -- Let it determine the memory limit, as there does not seem to be
         -- a (speed) benefit in giving an endless memory limit.
         "--level=4",
         -- Prove absolutely everything.
         "--mode=all",
         -- Give warnings about proofs if there are any.
         "--proof-warnings",
         -- All range check failures and warnings are treated as errors.
         "--checks-as-errors", "--warnings=error");

      FOR proof_dir             USE mu4_kern'object_dir;
      FOR proof_switches("Ada") USE
         SPARK_Proof_Switches;
   END Prove;

   PACKAGE Builder
   IS
      FOR switches(OTHERS) USE
        (-- No standard library since mu4 is a freestanding program
         -- without "-ffreestanding".
         "-nostdlib",
         -- No standard include paths.
         "-nostdinc");

      FOR global_configuration_pragmas USE
         "./ada_specifications/mu4_kern.adc";

      FOR executable("mu4.adb") USE "No_Makefile_mu4";
      FOR executable_suffix      USE ".elf";
   END Builder;

   PACKAGE Compiler
   IS -- `gcc`
      GCC_Basic_Switches := (
         "-fstack-protector-all",
         "-fstack-usage",
         "-msse2", "-mfpmath=sse", "-mprefer-vector-width=128",
         "-mpreferred-stack-boundary=4",
         "-mno-red-zone",
         "-fno-PIC", "-mcmodel=kernel",
         "-masm=intel",
         "-march=x86-64",
         "-mtune=generic"
      );

      Ada_Basic_Switches :=
        (-- May as well use the latest version of Ada, there is no harm in it.
         "-gnat2012",
         -- Strictly 7-bit ASCII only in source code. Disallow the upper
         -- half of the byte for the extra ISO 8859-1 (Latin-1) characters.
         "-gnatin",
         -- Disable the style enforcement and configure it later.
         "-gnatyN",
         -- Enable all warnings by default.
         "-gnatwa", "-gnatw.e",
         -- All runtime errors are not just warnings, but static errors.
         -- No idea why this is not enabled by default.
         "-gnatwE",
         -- Elaboration issues now raise a warning.
         "-gnatwl",
         -- Enable subprogram inlining, but don't give the aggression value,
         -- as we can let the optimisation level handle that.
         "-gnatn",
         -- Enable GNAT warnings.
         "-gnatw.g",
         -- Raise warnings about gaps inside representation clauses.
         "-gnatw.h",
         -- If a specified size is overridden, then mention it.
         "-gnatw.s",
         -- Disable exception propagation warnings.
         "-gnatw.X");

      Ada_Style_Switches := (
         "-gnaty3",
         "-gnatyA",
         "-gnatyB",
         "-gnatyb",
         "-gnatyC",
         "-gnatyd",
         "-gnatyf",
         "-gnatyh",
         "-gnatyi",
         "-gnatyM79",
         "-gnatyp",
         "-gnatyr",
         "-gnatyS",
         "-gnatys",
         "-gnatyu",
         "-gnatyx");

      Ada_Final_Switches := (
         "-g0",
         "-gnatVd",
         "-gnatx");

      Ada_Debug_Switches := (
         "-ggdb3",
         "-gnatVa",
         "-gnatR2s");

      C_Basic_Switches := (
         "-ffreestanding");

      C_Debug_Switches :=
        (
         "-DDEBUG=1",
         "-ggdb3");

      GAS_Basic_Switches :=
         "-Wa,-mamd64",
         -- Always output machine code for long mode by default (SysV ABI).
         "-Wa,--64",
         -- Don't suppress any warnings and make them into errors.
         "-Wa,--warn", "-Wa,--fatal-warnings",
         -- Define the stack as non-executable for paging purposes.
         "-Wa,--noexecstack",
         -- For the ".size" directive, raise an error if the size is invalid.
         "-Wa,--size-check=error",
         -- Optimise the machine code for no particular CPU family.
         "-Wa,-mtune=generic64",
         -- Raise an error if certain operands are invalid.
         "-Wa,-moperand-check=error",
         -- GAS supports Intel syntax. Prefer using that at all times.
         "-Wa,-msyntax=intel",
         -- Also use Intel-style mnemonics/instruction names. They're cleaner.
         "-Wa,-mmnemonic=intel",
         -- Avoid the pointless AT&T-style register prefix.
         "-Wa,-mnaked-reg");

      GAS_Debug_Switches :=
        (-- Output debugging information in any preferred format.
         "-Wa,--gen-debug");

      CASE
         Build
      IS
         WHEN "Final" =>
            FOR default_switches("Ada") USE
               GCC_Basic_Switches &
               Ada_Basic_Switches &
               Ada_Style_Switches &
               Ada_Final_Switches;
            FOR default_switches("ASM") USE
               GAS_Basic_Switches;
            FOR default_switches("C") USE
               GCC_Basic_Switches &
               C_Basic_Switches;
         WHEN "Debug" =>
            FOR default_switches("Ada") USE
               GCC_Basic_Switches &
               Ada_Basic_Switches &
               Ada_Style_Switches &
               Ada_Debug_Switches;
            FOR default_switches("ASM") USE
               GAS_Basic_Switches &
               GAS_Debug_Switches;
            FOR default_switches("C") USE
               GCC_Basic_Switches &
               C_Basic_Switches &
               C_Debug_Switches;
      END CASE;
   END Compiler;

   PACKAGE Binder
   IS -- `gnatbind`
      FOR default_switches("Ada") USE
        (-- Static GNAT runtime.
         "-static",
         -- Check if the source files actually exist and are findable;
         -- otherwise, raise an error.
         "-s", "-E",
         -- The stack size is controlled inside "entry.s", but I've also
         -- specified it here just in case it changes anything.
         "-d32768");
   END Binder;

   PACKAGE Linker
   IS -- `gnatlink` or `ld`
      Linker_Basic_Switches :=
        (-- Static GNAT runtime.
         "-static",
         -- No standard library initialisation e.g. constructors.
         "-nostartfiles",
         -- The custom linker script to be used which defines the entry
         -- point to the assembly file turned object.
         "-T../../source/kernel/linker.ld",
         -- Don't generate a build ID. We have no need for this. Some versions
         -- of `ld` make it automatically while others need it to be specified.
         "-Wl,--build-id=none",
         -- Include the GCC library.
         "-lgcc", "-static-libgcc",
         -- The UEFI `AllocatePages()` function allocates pages of size 4 KiB.
         -- Match it here just in case. Should also save some pages.
         "-zcommon-page-size=0x1000", "-zmax-page-size=0x1000",
         -- Specify the main library to be used by the executable.
         "-lmu4_kern_runtime");

      Linker_Final_Switches :=
        (-- Remove any unused dead code and data from the kernel file,
         -- just to make it smaller.
         "-Wl,--gc-sections",
         -- Strip the symbols in the discarded sections.
         "-Wl,--strip-discarded");

      Linker_Debug_Switches :=
        (-- Do not discard any local symbols.
         "-Wl,--discard-none",
         -- The binder source file now is compiled with debug information. This
         -- is likely ignored for direct `ld` usage.
         "-g");

      -- These are split up just in case a language might need a special flag
      -- or argument in the future etc.
      CASE
         Build
      IS
         WHEN "Final" =>
            FOR default_switches("Ada") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
            FOR default_switches("ASM") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
            FOR default_switches("C") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
         WHEN "Debug" =>
            FOR default_switches("Ada") USE
               Linker_Basic_Switches &
               Linker_Debug_Switches;
            FOR default_switches("ASM") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
            FOR default_switches("C") USE
               Linker_Basic_Switches &
               Linker_Final_Switches;
      END CASE;
   END Linker;
END mu4_kern;